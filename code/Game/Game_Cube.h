//==============================================================================
/// Filename: GameCube.h
/// Description: キューブの抽象化クラス
/// Copyright (C) Silicon Studio Co., Ltd. All rights reserved.
//==============================================================================

#pragma once

#include "Game_Device.h"

#include "../Utilities.h"

class GameCube {
public:
    //-----------------------------------------------------------------------------
    // public method

    //-----------------------------------------------------------------------------
    /// 初期化
    ///
    /// \param  [in]    _pDevice    表示するAPIのデバイスのポインタ
    /// 
    /// \return bool
    //-----------------------------------------------------------------------------
    virtual bool Init(
        /*[in]*/ GameDevice* _pDevice) = 0;

    //-----------------------------------------------------------------------------
    /// 更新処理
    /// 
    /// \param  [in]    _pDevice    表示するAPIのデバイスのポインタ
    /// 
    /// \return void
    //-----------------------------------------------------------------------------
    virtual void Update(
        /*[in]*/ GameDevice* _pDevice) = 0;

    //-----------------------------------------------------------------------------
    /// 描画処理
    ///
    /// \return void
    //-----------------------------------------------------------------------------
    virtual void Draw() = 0;

    //-----------------------------------------------------------------------------
    /// 解放処理
    /// 
    /// 
    //-----------------------------------------------------------------------------
    virtual void Release() = 0;

    //-----------------------------------------------------------------------------
    /// キューブ情報初期化
    /// 
    /// \return void
    //-----------------------------------------------------------------------------
    void InitCube();

    //-----------------------------------------------------------------------------
    /// キューブ情報初期化
    /// 
    /// \param  [in]    _ratio  キューブの大きさの倍率
    /// 
    /// \return void
    //-----------------------------------------------------------------------------
    void InitCube(float _ratio);

    //-----------------------------------------------------------------------------
    /// 頂点情報 取得
    /// 
    /// \return VertexCube
    //-----------------------------------------------------------------------------
    const VertexCube GetCubeVertex();

    //-----------------------------------------------------------------------------
    /// 行列 取得
    ///
    /// \return DirectX::XMFLOAT4X4
    //-----------------------------------------------------------------------------
    const DirectX::XMFLOAT4X4 GetMatrix();

    //-----------------------------------------------------------------------------
    /// 行列 回転
    /// 
    /// \return void
    //-----------------------------------------------------------------------------
    void RotateMatrix();

    //-----------------------------------------------------------------------------
    /// 回転 取得
    /// 
    /// \param  [in]    _axis   取得する軸 0ならX軸 1ならY軸 2ならZ軸
    /// 
    /// \return float
    //-----------------------------------------------------------------------------
    float GetRotateAngle(
        /*[in]*/ const int _axis);

    //-----------------------------------------------------------------------------
    /// テクスチャの特定の色 取得
    /// 
    /// \param  [in]    _x      X座標
    /// \param  [in]    _y      X座標
    /// \param  [in]    _color  0:赤 1:緑 2:青 3:アルファ値
    /// 
    /// \return int
    //-----------------------------------------------------------------------------
    unsigned char GetTexturePixelColor(
        /*[in]*/ const int _x ,
        /*[in]*/ const int _y ,
        /*[in]*/ const int _color);


    //-----------------------------------------------------------------------------

    //-----------------------------------------------------------------------------
    /// public variable

    static constexpr int TEXTURE_SIZE_X = 32;
    static constexpr int TEXTURE_SIZE_Y = 32;

    ///<
    /// TEXTURE_SIZE_X テクスチャの横の大きさ (2の累乗の数にすること)
    /// TEXTURE_SIZE_Y テクスチャの縦の大きさ (2の累乗の数にすること)
    ///<

    //-----------------------------------------------------------------------------
private:

    //-----------------------------------------------------------------------------
    /// 回転 初期化
    /// 
    /// \return void
    //-----------------------------------------------------------------------------
    void ResetAngle();

    //-----------------------------------------------------------------------------
    /// テクスチャの色 初期化
    /// 
    /// \return void
    //-----------------------------------------------------------------------------
    void InitTextureColor();

    //-----------------------------------------------------------------------------
    // private variable

    VertexCube m_cubeVertex;
    DirectX::XMFLOAT4X4 m_mtx;
    float m_angle[3];
    DirectX::XMFLOAT3 m_pos;
    unsigned char m_textureColor[TEXTURE_SIZE_Y][TEXTURE_SIZE_X][4];

    ///<
    /// m_cubeVertex    キューブの頂点座標を保持
    /// m_mtx           姿勢
    /// m_angle         回転
    /// m_pos           座標
    /// m_textureColor  テクスチャのピクセルごとの色情報
    ///<

    //-----------------------------------------------------------------------------
};
